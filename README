================================================================================
    cheat.sh        |   version 0.99    |   GPL v3 (see LICENSE)    | 2014-04-05
    James Hendrie   |   hendrie.james@gmail.com
================================================================================

TOC:
    1.  What is this?
    2.  Install / Uninstall
    3.  How do I use it?
    4.  Who made it?


1.  What is this?

    'cheat' is a cheat-sheet script for people who are too impatient to browse
    the manual page for a given program.  It's well-suited for those who might
    use a program only occasionally, and need only brief reminders on the
    'important bits'; the cliff-notes version of man pages, if you will.

    This particular version, written as a Bash script, is a reimplementation of
    a Python script originally written by Chris Lane.  The other version is the
    'main' version; this is the off-shoot.


2.  Install / Uninstall

    To install this script, as root, run 'make install' from inside the top
    directory to which you've downloaded/extracted the program; it should be the
    same directory where you found this README file.

    To uninstall the program, as root and from that same directory (or whichever
    directory contains the Makefile), run 'make uninstall'.


3.  How do I use it?

    Using this script is straightforward enough, in the typical UNIX/Linux
    fashion:

    cheat [OPTION] FILE[S]

    Options:
        -a or --add:        Add a text file to the cheat sheet directory
        -A:                 Add and compress (gzip) a text file
        -e or --edit:       Edit a cheat sheet, using editor in $EDITOR variable
        -k:                 Grep for a keyword or list all available
        -l or --list:       List all available cheat sheets
        -L:                 List all cheat sheets with full paths
        -h or --help:       List the help
        --version:          List version and author info
        -u or --update:     Update cheat sheets (safe way)
        -U:                 Overwrite all cheat sheets with downloaded versions


    Examples:

        cheat ap:           List all files with 'ap' in the filename; if there
                            is only one result, it will be displayed
        cheat -l:           List all available cheat sheets (in ~/.cheat)
        cheat -k tar:       Grep for all cheat sheets with 'tar' in the filename
        cheat -k tar sh:    Grep for sheets with 'tar' or 'sh' in filenames
        cheat -a foo:       Add 'foo' to the cheat sheet directory
        cheat -a foo bar:   Add both 'foo' and 'bar' to the cheat sheet dir
        cheat -A *.txt:     Add and compress all .txt files in current dir


    By default (and as of this version, there is no option to change this), all
    files added to the cheat sheet directory must be plain text files.  If they
    end with the extension .txt, that will be stripped from the filename.

    There are a couple of useful variables for people who use this script a lot:
    DEFAULT_CHEAT_DIR and CHEATPATH.

    DEFAULT_CHEAT_DIR is the directory in which cheat sheets are stored by 
    default.  This is set to $HOME/.cheat if left unspecified by the user.

    CHEATPATH is similar to the PATH variable, except it's used for cheat
    sheets.  If you're referencing cheat sheets from multiple directories, 
    you'll want to make use of this environment variable.  If this variable is
    not set by the user, it's populated by DEFAULT_CHEAT_DIR.  If the user does
    set this variable, it's up to them to include every directory in which cheat
    sheets are kept, as DEFAULT_CHEAT_DIR is not automatically added to the
    CHEATPATH variable.


4.  Who made it?

    This version:   James Hendrie
                        hendrie.james@gmail.com
                        https://github.com/jahendrie

    Main version:   Chris Lane
                        chris@chris-allen-lane.com
                        https://github.com/chrisallenlane
